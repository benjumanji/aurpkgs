Tomcat is an open source Java Servlet container http://en.wikipedia.org/wiki/Java_Servlet#Servlet_containers developed by the Apache Software Foundation.

	Note on Tomcat versions
		Tomcat currently exists under three stable branches: 5.5, 6 and 7. None of these deprecates the previous. Instead, each branch is the implementation of a couple of the "Servlet" and "JSP" Java standards http://tomcat.apache.org/whichversion.html#Apache_Tomcat_Versions. The version officially suported in Arch Linux is version 7 implementing Servlet 3.0 and JSP 2.2. If you happen to need to run a Java application with older version of Servlet and/or JSP, you should try unsupported packages tomcat5.5 or tomcat6 http://aur.archlinux.org/packages.php?ID=19452 from AUR.

Installation
	pacman -S tomcat

	If using  out of a development environment (eg production), consider installing tomcat-native [http://tomcat.apache.org/native-doc/]:
	pacman -S tomcat-native

	 This adds native 32b/64b code to enhance performance. This will remove the following warning in catalina.err:
	INFO: The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path ...

Filesystem hierarchy
	/usr/share/tomcat
		Main tomcat folder containing scripts and links to other directories
	/usr/share/java/tomcat
		Tomcat Java librairies (jars)
	/etc/tomcat
		Configuration files
	/etc/rc.d/tomcat
		Start/stop daemon script
	/etc/conf.d/tomcat
		Default running option file. Here you can set the JVM you want Tomcat to be run with, options to pass to Tomcat through the environment variable CATALINA_OPTS, ...
	/var/log/tomcat
		Log files (catalina.err: startup log, catalina.out: output from stdout, others are access logs and business logs defined in /etc/tomcat/server.xml as "Valve")
	/var/lib/tomcat/webapps
		Where tomcat deploys your web applications
	/var/tmp/tomcat
		Where tomcat store your webapps' data 

Initial configuration
	In order to be able to use the manager webapp and the admin webapp you need to edit this the following file:
	/etc/tomcat/tomcat-users.xml

	Uncomment the "role and user" XML declaration and modify it to enable roles tomcat, admin and/or manager depending on your needs.
	To keep it short, tomcat is the mandatory role used Tomcat, admin-* are roles able to administer web applications and admin-* are full right administrator roles on the Tomcat server.

	Here is a bare config file that declares all these roles along with usernames and password (Be sure to change the following [CHANGE_ME] passwords to something secure):

<?xml version='1.0' encoding='utf-8'?>
  <role rolename="tomcat"/>
  <role rolename="manager-gui"/>
  <role rolename="manager-script"/>
  <role rolename="manager-jmx"/>
  <role rolename="manager-status"/>
  <role rolename="admin-gui"/>
  <role rolename="admin-script"/>
  <user username="tomcat" password="[CHANGE_ME]" roles="tomcat"/>
  <user username="manager" password="[CHANGE_ME]" roles="manager-gui,manager-script,manager-jmx,manager-status"/>
  <user username="admin" password="[CHANGE_ME]" roles="admin-gui"/>
</tomcat-users>

	Keep in mind that Tomcat must be restarted each time a modification is made to this file.

	This blog post details these roles
		http://blog.techstacks.com/2010/07/new-manager-roles-in-tomcat-7-are-wonderful.html

Control Tomcat (start, stop, ...)
	Just use the standard Arch Linux script with the usual commands:
	/etc/rc.d/tomcat {start|stop|restart|status}

	As usual one can add "tomcat" to the DAEMONS array of the rc.conf to make it start at boot.

	Please note that Tomcat is packaged in Arch Linux to use the jsvc http://commons.apache.org/daemon/jsvc.html binary from common-daemons http://commons.apache.org/daemon/. Tomcat rc.d script runs this Apache binary with root privileges which itself starts Tomcat with an underprivileged user (tomcat:tomcat in Arch Linux). This prevents malicious code that could be executed in a bad web application from making too much damage along with enabling the use of port under 1024 (if needed). please see "man jsvc" for options available and pass them throught the CATALINA_OPTS envrionment variable declared in /etc/conf.d/tomcat.
 
	FYI tomcat can also be controled directly using upstream scripts:
		/usr/share/tomcat/bin/{startup.sh,shutdown.sh,..}
		This can be usefull to debug applications or even debug Tomcat. In order to be able to use these scripts, some further configuration may be needed. Be aware that using these scripts prevents the jsvc security advantage described above.

	Once Tomcat is started, you can visit this page to see the result: http://localhost:8080. If a nice Tomcat local home page is displayed this means your Servlet container is up and running and ready to host you web apps. If the startup script failed or you can only see a Java error displayed in you browser, have a look at startup logs in /var/log/tomcat/catalina.err ("catalina" is the name of Tomcat's servlet container). Google is full of answers on recurrent issues found in tomcat logs.

Deploy and handle web applications
	By default, two ways are available to deploy applications.
	The easiest is to use the manager webapp http://localhost:8080/manager/html. Use the username/password you defined as "manager" in tomcat-users.xml. Once logged in you can see five already deployed web applications. Add yours through the "Deploy" area and then stop/start/undeploy it with the "Applications" area.
	One can also just copy the WAR file of the application to directory /usr/share/tomcat/webapps. For that later, be sure that the autoDeploy option is still set for the right host in /etc/tomcat/server.xml:
		      <Host name="localhost"  appBase="webapps"
			unpackWARs="true" autoDeploy="true">

Further configation
	Basic configuration can be made through the virtual host manager web application: http://localhost:8080/host-manager/html. Provide the username/password you set in tomcat-users.xml. Other options are tweaked in configuration files in /etc/tomcat, the most important beeing server.xml. Using these files is out of the scope of this 101 wiki page. Please have a look at the official Tomcat 7 documentation for more details http://tomcat.apache.org/tomcat-7.0-doc/index.html.

Migrating from previous versions of Tomcat
	As said in the introduction, Tomcat 7 does NOT deprecates Tomcat 6 nor Tomcat 6 deprecates Tomcat 5.5. They are all three, implementations of Servlet/JSP standards. Hence you must first determine which version of Tomcat http://tomcat.apache.org/whichversion.html#Apache_Tomcat_Versions you need depending on the versions of Servlet/JSP your application uses. If you need to migrate, the official website gives instructions on how to handle such process http://tomcat.apache.org/migration.html.

Security configuration
	This page gives the bare minimum to get your first web application to run on Tomcat. It is not intended to be the definitive guide to administring Tomcat (it is a job of its own). The official Tomcat website will provide all necessary official matter. Still, here are some security tips to get you started:

	remove unwanted default applications such as examples, ... the reason is to remove unwanted code that could possibly include security homes. You could also remove the manager and deploy your java applications by copying the WAR into /usr/share/java/webapps. Be sure that the autoDeploy option is still set:
		      <Host name="localhost"  appBase="webapps"
			unpackWARs="true" autoDeploy="true">

	Use strong passwords in /etc/tomcat-users.xml and/or disable unused roles
	Disable SHUTDOWN from localhost
	Hash passwords in tomcat-users.xml:
		This may not be relevant because only root can read and write to that file. If an intruder manages gain root access then he would not need such accesses to mess with your applications/data anyway. Be sure to keep restricted RW access to that file!
		Still if you want to hash these passwords, have a look at the upstream script /usr/share/tomcat/bin/digest.sh
	Always know what you are deploying
